#!/bin/bash
#
#	Author: 	Simon Arjuna Erat (sea)
#	Contact:	erat.simon@gmail.com
#	License:	GNU Lesser General Public License (LGPL)
#	Created:	2014.04.15
#	Changed:	2014.04.16
	script_version=0.3
#	Description:	Should help to troubleshoot EFI related issues
#
#	Variables
#
	if [ -d /usr/share/tui ] 
	then 	source tui
	else 	[ ! 0 -eq $UID ] && echo "Requires root access (to run, and to install TUI {Text User Interface})" && exit 1
		! git --version > /dev/zero && \
			yum -y install git && \
			git clone https://github.com/sri-arjuna/tui.git /tmp/tui.inst && \
			sh /tmp/tui.inst/install.sh
	fi
	ME="$(basename $0)"
	TITLE="EFI TroubleShoot Helper "
	help_text="
$ME ($script_version)	--	$TITLE
Usage:	$ME [options]
	$ME	Opens a textual wizzard-like oriented menu
Where options are:
	-h		This screen
	-d(evice) ARG	If EFI partition is NOT on /dev/sda

"
	
#
#	Configuration : Sea's Dynamic Template
#
	# EFI_{MS,LNX} contains the path to the configurations
	EFI_MS=Microsoft/Boot/bootmgfw.efi
	EFI_LNX=fedora/shim.efi		# TODO verify which one
	# LBL_{MS,LNX} is the label used for meny entries
	LBL_MS="Windows_8"
	LBL_LNX="Fedora_20"
	DEVICE=/dev/sda		# Default value
#
#	Generated (and 'shared') Variables
#	
	E=$(which efibootmgr)
	PART=$(fdisk -l $DEVICE|grep -i efi|awk '{print $1}')
	[ -z $PART ] && \
		tui-echo "FATAL: No EFI-Partition found!" "$FAIL" && \
		exit 1
#
#	Catching Arguments
#
	[ ! 0 -eq $UID ] && tui-echo "Requires root access!" "$FAIL" && exit 1
	while getopts "d:h" name
	do 	case $name in
		d)	device="$OPTARG" ;;
		h)	printf "$help_text"
			exit $RET_HELP	;;
		esac
	done
#
#	Functions
#
	ListEntries() { # 
	# List numeric EFI entries
	# 
		$E |grep ^Boot[0-9]*\* | grep -ve Order -ve Current | awk '{print $1}' | sed s/Boot//g|sed s/\*//g
	}
	ShowInfo() { # Argument examples
	# Descriptional, ...
	# Text here
		output="$($E |grep ^Boot[0-9]|grep -v ^Boot[!^2][0-9])"
		[ ! "" = "$(echo $output)" ] && \
			tui-title "Show Info" && \
			echo "$output" || \
			tui-status 1 "ShowInfo:" "No information available"
	}
	GetDefaultNum() { #
	# Returns the ID of the '2' default entries
	# For MS Windows and Fedora
		tmp="/tmp/tmp$$"
		$E -v > $tmp
	
		for entry in $(ListEntries);do
			grep $entry $tmp | grep -i Microsoft|grep -i bootmgfw.efi | awk '{print $1}'|sed s,Boot,,g|sed s,\*,,g
			grep $entry $tmp | grep -i fedora|grep shim.efi  | awk '{print $1}'|sed s,Boot,,g|sed s,\*,,g
		done
	}
	getUUID() { # 
	# Parses BLKID's output for efi entries and return its uuid
	#
		oifs="$IFS" ; IFS=" "
		blkid | grep -i efi | \
			while read part uuid type label puuid;do
				tmp=$(printf $uuid|sed s,"="," ",g|awk '{print $2}')
				UUID=${tmp:1:-1}
				printf $UUID
			done
		IFS="$oifs"
	}
#
#	Display & Action
#
#					"Delete BootOrder"
	MENU=( 	"New Entry" \
		"Delete Entry" \
		"New BootOrder" \
		"Delete BootOrder" \
		"Set Next Boot Target" \
		"Clear all" \
		"Debug Info" \
		"Sea's Dynamic Template" \
		"Windows MBR not found by GRUB" \
		"Clean disk & test all" )
	tui-title "$TITLE ($script_version)"
	tui-echo "Please select a task to accomplish"
	select TASK in "${MENU[@]}" Exit;do
	[ Exit = "$TASK" ] && \
		break || \
		tui-title "$TASK"
	case "$TASK" in
	"New Entry")		if tui-yesno "Do you want to provide information?"
				then 	tui-echo "Please select which OS should get a new entry?"
					LOCAL=/boot/efi
					LIST=$(ls $LOCAL/EFI/|sort)
					select OS in $LIST;do OS=$(echo /EFI/$OS);break;done

					tui-echo "Please select the SHIM that shall be used:"
					LIST=$(find $LOCAL/$OS -name *efi)
					select SHIM in $LIST;do SHIM="${SHIM:${#LOCAL}+1})";break;done
					SHIM="$(echo ${SHIM}|sed s/'\/'/'\\'/g)"
					
					LABEL=$(tui-read "What is the label for this entry ($SHIM: ")

					tui-echo "Please select the proper harddisk, usualy its 'sda'"
					select DEVICE in $(ls /dev/[hs]d[a-z]);do break;done
					
					PART_ID=${PART:${#PART} - 1}
					
					$E -c -d $DEVICE -l $SHIM -p $PART_ID -L $LABEL > /dev/zero
					tui-status $? "Created new entry ($LABEL)"
					ShowInfo
				else 	tui-echo "Setting up an empty new entry..."
					$E -c > /dev/zero
					ShowInfo
				fi
				;;
	"Delete Entry")		ShowInfo
				tui-echo "Which entry to you want to remove?"
				select ENTRY in $(ListEntries);do
					ITEM=$($E|grep ^Boot[0-9]|grep $ENTRY|awk '{print $2" "$3" "$4}')
					tui-yesno "Are you sure to remove $ITEM" || exit 0
					$E -b $ENTRY -B $ENTRY
					tui-status $? "Deleted old entry $ENTRY ($ITEM)"
					break
				done ;;
	"Delete BootOrder")	ShowInfo
				tui-echo "Current BootOrder:" "$($E|grep -i bootorder|awk '{print $2}')"
				tui-yesno "Empty current BootOrder?" && $E -O
				tui-status $? "Deleted BootOrder"
				 ;;
	"New BootOrder")	ShowInfo
				doneORDER=false
				BootOrder=""
				while ! $doneORDER;do
				tui-echo "Please add an entry:" "BootOrder: $BootOrder"
				COLS_ORG=$COLUMNS
				COLUMNS=115
				select O in Done $(ListEntries);do break;done
				COLUMNS=$COLS_ORG
				[ "$O" = Done ] && \
					doneOrder=true && \
					break || BootOrder+=",$O"
				done
				BootOrder=${BootOrder:1}
				if tui-yesno "Set BootOrder to: $BootOrder? : "
				then 	$E -o $BootOrder > /dev/zero
					tui-status $? "Current $($E|grep -i BootOrder)" 
				fi
				;;
	"Set Next Boot Target")	ShowInfo
				tui-echo "Which system do you want to boot next?"
				select choice in $(ListEntries);do
					efibootmgr -b $choice -n $choice > /dev/zero
					tui-status $? "Set $($E|grep BootNext)"
					
					break
				done
				;;
	"Debug Info")		tui-header "${E##*/} $(efibootmgr -V|awk '{print $2}')" \
					"Debug Info" \
					"$(date)"
				ShowInfo
				tui-title "$E -v"
				$E -v
				;;
	"Sea's Dynamic Template")
				tui-echo "The script is supposed to :"
				tui-echo "* delete all (nvram) entries"
				tui-echo "* add a windows & fedora entry."
				tui-echo
				tui-echo "This is automated and COULD result in an unbootable system!"
				tui-yesno "Continue on your own risk?" || exit 1
				tui-header "Welcome to sea's automatic 'setup'"
				MSG="Removing non-(U)EFI entries"
				
				#set -x		# DEBUG ON // TODO
				
				# LIST="$($E)"
				for entry in $(ListEntries);do
					#if [ ! 2 -eq ${entry:0:1} ] ; then
					 	tui-printf "$MSG ($entry)" "[  $(tui-indi)  ]"
						$E -b $entry -B $entry > /dev/zero
					#fi
				done
				tui-status $? "${MSG/ving/ved}"
				
				PRE=/boot/efi
				P=/EFI
				
				DEVICE=$PART
				PART=${PART:${#PART} - 1}
				
				EFI_MS="$(echo ${EFI_MS}|sed s/'\/'/'\\'/g)"
				EFI_LNX="$(echo ${EFI_LNX}|sed s/'\/'/'\\'/g)"
				P="$(echo ${P}|sed s/'\/'/'\\'/g)"
				
				MSG="Adding Microsoft EFI entry"
				tui-printf "$MSG" "$WORK"
				$E -c -d $DEVICE -p $PART -l $P$EFI_MS -L $LBL_MS #> /dev/zero
				tui-status $? "${MSG/ding/ded}"
				
				MSG="Adding Fedora EFI entry"
				tui-printf "$MSG" "$WORK"
				$E -c -d $DEVICE -p $PART -l $P$EFI_LNX -L $LBL_LNX #1> /dev/zero
				tui-status $? "${MSG/ding/ded}"
				
				ORDER=0001,0000
				$E -o $ORDER > /dev/zero
				tui-status $? "Bootorder set to: $ORDER"
				
				ShowInfo
				;;
	"Clear all")		MSG="Removing EFI entries"
				tui-echo "This will delete ALL entries to choose as boot target."
				tui-yesno "Continue anyway?" || exit 0
				$E -O  > /dev/zero
				for entry in $(ListEntries);do
					tui-printf "$MSG ($entry)" "[  $(tui-indi)  ]"
					$E -b $entry -B $entry > /dev/zero
					tui-status $? "Removed $entry"
				done
				ShowInfo
				;;
	"${MENU[8]}"|"Windows MBR not found by GRUB")
				MSG=""
				tui-echo "This will create an entry (file) for grub-deamon."
				tui-echo "It will also create a script (gupd) for easier later updates."
				#tui-yesno "Continue?" || exit 0
				
				#tui-echo TODO
				
				
				
				UUID=$(getUUID)
				tui-echo "UUID of EFI partition:" "$UUID"
				
				cat > /etc/grub.d/11_windows << EOF
#!/bin/sh
exec tail -n +3 $0
menuentry "Windows 8" --class windows {
	insmod part_gpt
	insmod fat
	insmod search_fs_uuid
	insmod chain
	search --fs-uuid --no-floppy --set=root $UUID
	chainloader (\${root})/efi/Microsoft/Boot/bootmgfw.efi
}
EOF
				cat > /usr/bin/gupd << EOF
#!/bin/bash
[[ ! \$UID -eq 0 ]] && tui-echo "$ME requires root access!" && exit 1
mv /boot/efi/EFI/fedora/grub.cfg /boot/efi/EFI/fedora/grub-$(date +"%F").bak
grub2-mkconfig > /boot/efi/EFI/fedora/grub.cfg
EOF
				chmod +x /etc/grub.d/11_windows /usr/bin/gupd
				
				;;
	"Clean disk & test all")
				#
				#	Clean the disk
				#
				tui-echo "This will clean the disk from nvr entries,"
				tui-echo "and add every found '*.efi' file in /boot/efi/EFI"
				tui-press "Continue?"
				MSG="Removing entries..."
				for entry in $(ListEntries);do
					tui-printf "$MSG ($entry)" "[  $(tui-indi)  ]"
					$E -b $entry -B $entry > /dev/zero
				done
				tui-status $? "Removed $entry"
				cd /boot/efi/EFI/
				for HOUSE in *;do
					SHIMS=$(find $HOUSE -name *efi)
					for shim in $SHIMS;do
						this="${shim/\/boot/}"
						new_shim="$(echo $shim| sed s,'/','\\',g)"
						label=${shim##*/}
						label="${label/\.efi/}"
						$E -c -d $DEVICE -p $PART -l \\EFI\\$new_shim -L "${HOUSE}_$label"
					done
				done
				NUMS=$(echo $(GetDefaultNum)) #|sed s/' '/','/g
				tui-printf "Setting bootorder to default nums:" "$NUMS"
				$E -o ${NUMS/' '/','} > /dev/zero
				tui-status $? "Set new bootorder."
				;;
	esac
	tui-header "Please select a task to accomplish:" "Press enter to see the menu"
	done
	tui-yesno "Update GRUB?" && gupd # grub2-mkconfig -o /boot/efi/EFI/fedora/grub.cfg
	tui-yesno "Reboot now?" && reboot
